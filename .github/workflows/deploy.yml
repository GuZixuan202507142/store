name: Build, Push, and Deploy to DigitalOcean

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: registry.digitalocean.com/mystore
  IMAGE_NAME_BACKEND: copilot-store-backend
  IMAGE_NAME_FRONTEND: copilot-store-frontend

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 1200

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./store-backend
          file: ./store-backend/Dockerfile.prod
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./store-frontend
          file: ./store-frontend/Dockerfile.prod
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest

deploy:
    name: Deploy to Droplet
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_DROPLET_IP }}
          username: root
          password: ${{ secrets.DO_DROPLET_PASSWORD }}
          script: |
            cd ~/store || exit 1
            
            echo "Copying production environment file..."
            cp ./store-backend/.env.production ./store-backend/.env

            echo "Logging into DigitalOcean Container Registry..."
            echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login registry.digitalocean.com -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} --password-stdin
            
            echo "Pulling latest images..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            
            echo "Stopping and removing old containers..."
            docker-compose -f docker-compose.prod.yml down
            
            echo "Starting new containers..."
            docker-compose -f docker-compose.prod.yml up -d
            
            echo "Deployment complete."
